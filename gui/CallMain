

import sys
from PyQt5.QtWidgets import QWidget, QMessageBox, QApplication, QMainWindow
from PyQt5.QtCore import QTimer, QDateTime, Qt
from PyQt5 import QtCore, QtGui
from PyQt5.QtWidgets import QFileDialog
from main import Ui_MainForm
import os
import re
import logging
import datetime
import operator


def loadPath():
    with open("path", 'r', encoding='utf-8') as f:
        datadir = f.readline()
    return datadir


def labelImg():
    try:
        os.system("labelImg")
    except BaseException as e:
        print("还未安装labelImg，正在自动安装。。。")
        os.system("pip install labelImg -i https://pypi.douban.com/simple")
        os.system("labelImg")





def checkDataSet(path):
    files = os.listdir(path)
    imgs = []
    xmls = []
    for i in files:
        filenames = os.path.splitext(i)
        if filenames[1] in [".bmp",".jpg",".jpeg",".png",".tif",".tiff",".dng",".webp",".mpo"]:
            imgs.append(filenames[0])

        if filenames[1] == ".xml":
            xmls.append(filenames[0])
    if len(imgs) == 0:
        return "目录中没有图像文件"
    if len(xmls) == 0:
        return "目录中没有xml文件"
    if len(imgs) == 0 and len(xmls) == 0:
        return "目录中没有图像与xml文件"
    if len(imgs) != len(xmls):
        return "数据集图片与xml数目不匹配！请检查数据集"
    elif not operator.eq(imgs, xmls):
        return "数据集图片与xml文件名不匹配，请检查数据集"
    else:
        return "数据集合法"






class MainForm(QWidget,Ui_MainForm):
    def __init__(self):
        super(MainForm, self).__init__()
        self.setupUi(self)
        self.connecter()
        self.dataDir = loadPath()
        self.lineEdit.setText(self.dataDir)





    def connecter(self):
        self.browserButton.clicked.connect(self.browser)
        self.labelImgButton.clicked.connect(labelImg)
        self.checkButton.clicked.connect(self.checkData)



    def browser(self):
        self.outputWritten("请选择数据集所在目录")
        self.dataDir = QFileDialog.getExistingDirectory(self, "选取文件夹", self.dataDir)
        self.lineEdit.setText(self.dataDir)
        with open("path", "w", encoding='utf-8') as f:
            f.write(self.dataDir)
        self.outputWritten("数据集已选择："+self.dataDir+"，正在检验其合法性。。。")
        self.outputWritten(checkDataSet(self.dataDir))

    def checkData(self):
        self.outputWritten("正在检验数据集合法性。。。")
        self.outputWritten(checkDataSet(self.dataDir))


    def keyPressEvent(self, key):
        pass

    def outputWritten(self, text):

        cursor = self.logTerminal.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertText(f'>>> {datetime.datetime.now()} ' + '- ' + text + '\n')
        self.logTerminal.setTextCursor(cursor)
        self.logTerminal.ensureCursorVisible()
        QApplication.processEvents()  # 一定加上这个功能，不然有卡顿


if __name__  == "__main__":
    app = QApplication(sys.argv)
    calu = MainForm()
    calu.show()
    sys.exit(app.exec())